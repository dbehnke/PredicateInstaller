/*
 *     Generated by class-dump 3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
 */

#pragma mark -

/*
 * File: /System/Library/PrivateFrameworks/SoftwareUpdate.framework/Versions/A/SoftwareUpdate
 * UUID: A4C2E56E-4554-3B6A-ACAC-5A969BC3F0FD
 * Arch: x86_64
 *       Current version: 747.0.0, Compatibility version: 1.0.0
 *       Source version: 790.0.0.0.0
 *       Minimum Mac OS X version: 10.11.0
 *       SDK version: 10.11.0
 *
 *       Objective-C Garbage Collection: Supported
 */

@protocol NSCoding
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFileManagerDelegate <NSObject>

@optional
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldRemoveItemAtURL:(id)arg2;
- (BOOL)fileManager:(id)arg1 shouldRemoveItemAtPath:(id)arg2;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 linkingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 linkingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldLinkItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldLinkItemAtPath:(id)arg2 toPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 movingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 movingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldMoveItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldMoveItemAtPath:(id)arg2 toPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 copyingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 copyingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldCopyItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldCopyItemAtPath:(id)arg2 toPath:(id)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(id)arg3;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
@end

@protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;

@optional
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(id)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(id)arg5;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
@end

@protocol PKPackageSource
- (id)allPackageReferences;

@optional
- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
@end

@protocol PKURLAuthenticationHandler
- (void)promptForAuthenticationChallenge:(id)arg1;
@end

@protocol SUDownloadService <NSObject>
- (void)dumpDebugInfo;
- (void)resetState;
- (void)setCatalogTestMode:(id)arg1 withDevKeyHeader:(id)arg2 andData:(id)arg3;
- (void)downloadStatusForProductKey:(id)arg1 reply:(id)arg2;
- (void)cancelDownloadForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)cancelDownloadForProductKey:(id)arg1;
- (void)addProductToDownload:(id)arg1 replyWhenDone:(id)arg2;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 reply:(id)arg2;
@end

@protocol SUDownloadServiceClient <NSObject>
@end

@protocol SUHelperDProtocol
- (id)lookupURLCredentialInSystemKeychainForHost:(id)arg1 port:(long long)arg2;
- (BOOL)commitLoginCredentialsDisablingFLO:(BOOL)arg1;
- (BOOL)stashLoginCredentialsEnablingFLO:(BOOL)arg1;
- (BOOL)unenrollFromSeedProgram;
- (BOOL)setOSXAutoUpdate:(BOOL)arg1;
- (BOOL)setAppStoreAutoUpdate:(BOOL)arg1;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)updateAnyUserPreferences;
- (BOOL)clearAnyUserPreference:(id)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (BOOL)getDigest:(id *)arg1 forPackageAtURL:(id)arg2;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)createDirectoryForProductKey:(id)arg1 Firmware:(BOOL)arg2;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)writeUpdatesIndex:(id)arg1;
- (id)readUpdatesIndex;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)moveInstalledPrintersToLibraryFromPath:(id)arg1;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 firmware:(BOOL)arg3 trustLevel:(int *)arg4 keepOriginal:(BOOL)arg5;
- (BOOL)prepareLoginWindowForPostLogoutInstallWithNoConsoleUser;
- (int)prepareForLogoutAndInstall:(BOOL)arg1;
- (void)checkAndFixPermissionsAtPath:(id)arg1 owner:(unsigned int)arg2;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
@end

@protocol SUURLSessionDownloadDelegate
- (void)saveCurrentState;
- (void)downloadSessionDidFinishForProductKey:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (id)packageReferenceForPackageIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPreviousRef:(id)arg3;
@end

@protocol SUUpdateClient <NSObject>
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;

@optional
- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
@end

@protocol SUUpdateService <NSObject>
- (void)resetServiceWithReply:(id)arg1;
- (void)dumpServiceDebugInfo;
- (void)suspendBackgroundTasksTemporarily:(BOOL)arg1 desiredDuration:(long long)arg2 reply:(id)arg3;
- (void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(id)arg2;
- (void)statusForUpdateWithProductKey:(id)arg1 reply:(id)arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(id)arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(id)arg2;
- (void)stringRepresentationOfLongDescriptionForProductKey:(id)arg1 reply:(id)arg2;
- (void)stashURLCredential:(id)arg1;
- (void)commitLoginCredentialsDisablingFLO:(BOOL)arg1 finishBlock:(id)arg2;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 reply:(id)arg2;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(id)arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(id)arg6;
- (void)productKeysToInstallAfterLogoutWithReply:(id)arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 shouldStashCredentials:(BOOL)arg4 reply:(id)arg5;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(id)arg2;
- (void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startInstallingAdminUpdates:(id)arg1 replyWhenDone:(id)arg2;
- (void)startUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(BOOL)arg2 reply:(id)arg3;
- (void)deviceInitiatedScanWithReply:(id)arg1;
- (void)buildTagCacheIfNecessaryWithReply:(id)arg1;
- (void)markRampedUpdatesAsSeenWithReply:(id)arg1;
- (void)clearAllHiddenUpdatesWithReply:(id)arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 distributionEvalutionMetainfo:(id)arg3 installedPrinters:(id)arg4 preferredLocalizations:(id)arg5 replyWhenDone:(id)arg6;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(id)arg1;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(id)arg2 replyWhenDone:(id)arg3;
- (void)catalogAndScanInformationWithReply:(id)arg1;
- (void)catalogInformationWithReply:(id)arg1;
- (void)installStatus:(id)arg1 didChangeExternallyForProductKey:(id)arg2;
- (void)currentDevKeyModeWithReply:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (void)packageReferenceForMatchingIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPrevious:(BOOL)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(unsigned long long)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(id)arg3;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(id)arg1;
- (void)authorizeForManagingDaemonWithExternalFormData:(id)arg1 reply:(id)arg2;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(id)arg3;
@end

@interface SUTestValidator : NSObject
{
    NSDictionary *_productValidationsDict;
}

+ (id)sharedTestValidator;
- (unsigned long long)validationOverrideForProductKey:(id)arg1;
- (id)init;
- (void)_plistDidChange:(id)arg1;
- (void)_loadProductValidations;

@end

@interface _SUAppStoreControllerCancelHandler : NSObject
{
    NSArray *_keys;
    BOOL _isCancelled;
    struct dispatch_queue_s *_syncQueue;
}

- (void)cancelUsingConnection:(id)arg1;
- (void)setProductKeys:(id)arg1;
- (BOOL)isCancelled;
- (void)dealloc;
- (id)init;

@end

@interface SUCatalogFetch : NSObject
{
    NSDictionary *_catalogDictionary;
    NSURL *_finalURL;
    NSString *_previousEntityTag;
    BOOL _skipIfUnchanged;
    NSString *_currentEntityTag;
    BOOL _didUseDefaultURL;
    BOOL _didUseAppleDefaultProductionURL;
    NSError *_error;
}

+ (BOOL)_isAppleSeedCatalogURL;
+ (BOOL)isUsingAppleSeedCatalogURL;
+ (id)defaultAppleCatalogURL;
+ (id)appleCatalogURL;
+ (id)catalogURL;
+ (id)priorProductionCatalogURLs;
- (id)error;
- (id)catalogEntityTag;
- (BOOL)isCatalogChanged;
- (BOOL)isAppleSeedCatalogURL;
- (BOOL)isDefaultAppleProductionCatalogURL;
- (BOOL)isDefaultAppleCatalogURL;
- (id)finalURL;
- (id)catalogDictionary;
- (void)dealloc;
- (id)init;
- (id)initWithURL:(id)arg1 previousEntityTag:(id)arg2 skipIfUnchanged:(BOOL)arg3;
- (id)_fetchCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleDefault:(char *)arg3 isAppleProductionDefault:(char *)arg4 usingURL:(id)arg5;
- (id)_fetchAppleCatalogDictionaryReturningError:(id *)arg1 finalURL:(id *)arg2 isAppleProductionDefault:(char *)arg3;
- (BOOL)_isEVCheckDisabled;
- (id)_fetchDictionaryFromURL:(id)arg1 returningError:(id *)arg2;

@end

@interface SUCatalog : NSObject
{
    NSURL *_catalogURL;
    NSDictionary *_dictionaryRepresentation;
}

- (id)extraInfoForProductKey:(id)arg1;
- (id)packageDictionariesForProductKey:(id)arg1;
- (id)distributionURLForProductKey:(id)arg1 preferredLocalizations:(id)arg2;
- (id)localizationsForProductKey:(id)arg1;
- (id)productDictionaryForProductKey:(id)arg1;
- (id)productKeys;
- (long long)catalogVersion;
- (id)dictionaryRepresentation;
- (id)catalogURL;
- (id)description;
- (void)dealloc;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1 catalogURL:(id)arg2;
- (id)productByLoadingDistributionForProductKey:(id)arg1 localization:(id)arg2 error:(id *)arg3;

@end

@interface SUProduct : NSObject <NSSecureCoding>
{
    NSString *_productKey;
    PKDistribution *_distribution;
    NSDictionary *_extraInfo;
    NSDictionary *_packageInfoForPackageURL;
    unsigned long long _downloadSize;
    unsigned long long _installSize;
    NSString *_baseDisplayName;
    NSString *_displayVersion;
    NSString *_longDescription;
    int _restartAction;
    NSArray *_orderedPackageSpecifiersToInstallWithoutPatchFiltering;
    BOOL _startsSelected;
    NSMutableDictionary *_packageReferenceForPackageIdentifier;
    PKDistributionChoice *_swuChoice;
    NSDictionary *_distributionEnv;
    long long _downloadSizeOnce;
    long long _installSizeOnce;
    long long _swuChoiceOnce;
    NSDictionary *_distributionEvaluationMetainfo;
}

+ (BOOL)supportsSecureCoding;
+ (void)setUsingSeedCatalog:(BOOL)arg1;
+ (BOOL)isUsingSeedCatalog;
+ (void)setCatalogVersion:(long long)arg1;
+ (long long)catalogVersion;
+ (BOOL)_isCriticalWithExtraInfo:(id)arg1;
+ (id)__extendedValueForKey:(id)arg1 extraInfo:(id)arg2;
+ (BOOL)_isStagedWithExtraInfo:(id)arg1;
+ (id)_productKeysFromProducts:(id)arg1;
@property(retain) NSDictionary *distributionEvaluationMetainfo; // @synthesize distributionEvaluationMetainfo=_distributionEvaluationMetainfo;
- (unsigned long long)installSize;
- (unsigned long long)_installSizeForPackageReference:(id)arg1;
- (unsigned long long)downloadSize;
- (id)packageURLs;
- (BOOL)hasInstallablePackages;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (void)invalidatePackageIdentifierInCache:(id)arg1;
- (id)packageIdentifiersToInstall;
- (id)orderedPackageSpecifiersToInstall;
- (id)orderedPackageReferencesToInstall;
- (BOOL)_isActiveDistributionPackageReference:(id)arg1;
- (id)allSoftwareUpdatePackageReferences;
- (id)_allPackageReferencesUnderChoice:(id)arg1;
- (int)restartAction;
- (id)readmeDataReturningMIMEType:(id *)arg1;
- (id)licenseDataReturningMIMEType:(id *)arg1;
- (id)_resourceDataForKey:(id)arg1 returningMIMEType:(id *)arg2;
- (id)descriptionDataReturningMIMEType:(id *)arg1;
- (id)displayVersion;
- (id)displayName;
- (id)identifier;
- (id)choice;
- (id)distribution;
- (id)productKey;
- (id)description;
- (void)didRegisterProductWithPackageSource;
- (BOOL)setPKMDataByPackageURL:(id)arg1;
- (void)_cacheDataFromDistributionController:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1 distribution:(id)arg2 distributionController:(id)arg3;
- (id)initWithProductKey:(id)arg1 catalogProductDictionary:(id)arg2 localization:(id)arg3 error:(id *)arg4;
- (id)_updateInfoDictionary;
- (void)_setDistributionEnvironment:(id)arg1;
- (id)_distributionEnvironment;
- (void)_setExtraInfo:(id)arg1;
- (id)_extraInfo;
- (BOOL)_shouldLaunchFirstLoginOptimization;
- (BOOL)_shouldAuthenticateReboot;
- (BOOL)_allowedToUseInstallLater;
- (id)_customPostInstallNotifyURL;
- (id)_customPostInstallNotifyText;
- (id)_customPostInstallNotifyTitle;
- (BOOL)_shouldNotifyUserAfterAutoInstall;
- (id)_customCriticalText;
- (id)_customCriticalTitle;
- (BOOL)_shouldRegisterCriticalUpdateForPostLogoutInstallNow;
- (BOOL)_shouldAutoInstallCriticalUpdateInBackgroundNow;
- (long long)_shouldAutoInstallCriticalUpdateWithDelayInHours;
- (BOOL)_isCritical;
- (BOOL)_isWaitingFirmware;
- (BOOL)_isAdminDisabled;
- (BOOL)_isVisibleForPredicateOnly;
- (BOOL)_isFirmware;
- (BOOL)_isConfigData;
- (BOOL)_isRampedUnseen;
- (BOOL)_isRamped;
- (BOOL)_isRecommendedForStageOnly:(BOOL)arg1;
- (BOOL)_isRecommended;
- (BOOL)_isStaged;
- (BOOL)_isIgnored;
- (BOOL)_isStandardVisibleRecommendedProduct;
- (BOOL)_requiresPKMData;
- (BOOL)_installsBundlePackages;
- (id)_disabledGroupID;
- (id)_labelVersion;
- (id)_label;

@end

@interface SUCatalogPackageSource : SUPackageSource
{
    NSMutableDictionary *_packageReferencesByProduct;
    NSMutableDictionary *_digestByPackageURLPath;
}

+ (BOOL)supportsSecureCoding;
- (id)packageReferencesMatchingIdentifier:(id)arg1 version:(id)arg2;
- (id)allPackageReferences;
- (id)digestForPackageAtURLPath:(id)arg1;
- (id)description;
- (id)descriptionForProduct:(id)arg1;
- (void)dealloc;
- (BOOL)registerProduct:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCatalog:(id)arg1;
- (id)_packageDictionaryForProductKey:(id)arg1 matchingPackageURL:(id)arg2;

@end

@interface SUProductLoadOperation : NSOperation
{
    NSString *_productKey;
    NSURL *_distributionURL;
    NSData *_distributionData;
    NSDictionary *extraInfo;
    BOOL shouldBuildCacheOnly;
    SUMetadataCache *metadataCache;
    NSDictionary *distributionEnv;
    SUProduct *_product;
    NSError *_error;
    NSDictionary *_distributionEvaluationMetainfo;
}

@property(retain) NSDictionary *distributionEvaluationMetainfo; // @synthesize distributionEvaluationMetainfo=_distributionEvaluationMetainfo;
@property(retain) NSDictionary *distributionEnv; // @synthesize distributionEnv;
@property(retain) SUMetadataCache *metadataCache; // @synthesize metadataCache;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSDictionary *extraInfo; // @synthesize extraInfo;
- (id)error;
- (id)product;
- (BOOL)_isValidChoice:(id)arg1;
- (BOOL)applyPKMDataByPackageURL:(id)arg1;
- (BOOL)evaluateProduct;
- (id)description;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 distributionURL:(id)arg2 distributionData:(id)arg3;

@end

@interface SUTestDefaults : NSObject
{
    NSString *_testMode;
}

+ (id)sharedDefaults;
- (int)requiredPackageTrustLevelForCurrentMode;
- (BOOL)okayToUseNonProductionMode;
- (BOOL)inThirdPartyMode;
- (BOOL)inDevKeyMode;
- (BOOL)inProductionMode;
- (void)exitTestMode;
- (id)currentTestMode;
- (BOOL)attemptToEnterTestMode:(id)arg1;
- (void)dealloc;

@end

@interface SUDownloadServiceAgent : NSObject <SUDownloadService, NSXPCListenerDelegate, SUURLSessionDownloadDelegate>
{
    NSXPCListener *_listener;
    NSMutableArray *_clients;
    NSMutableDictionary *_downloadSessionsByKey;
    NSMutableDictionary *_downloadProductsByKey;
    NSMutableDictionary *_updateStatusByKey;
    NSMutableDictionary *_recentStatusByKey;
    struct AuthorizationOpaqueRef *_installAuth;
    NSMutableArray *_acquiredRights;
    NSMutableDictionary *_downloadDoneBlocksByKey;
    NSMutableDictionary *_initiatedDownloadsByKey;
    NSLock *_serviceConnectionLock;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _didAuthForUpdating;
    struct dispatch_queue_s *_serviceQueue;
    struct dispatch_queue_s *_clientsQueue;
    struct dispatch_queue_s *_downloadQueue;
    struct dispatch_queue_s *_updateStatusQueue;
    NSXPCConnection *_suDaemonConnection;
}

+ (id)sharedDownloadServiceAgent;
@property(readonly) NSXPCConnection *suDaemonConnection; // @synthesize suDaemonConnection=_suDaemonConnection;
@property(readonly) struct dispatch_queue_s *updateStatusQueue; // @synthesize updateStatusQueue=_updateStatusQueue;
@property(readonly) struct dispatch_queue_s *downloadQueue; // @synthesize downloadQueue=_downloadQueue;
@property(readonly) struct dispatch_queue_s *clientsQueue; // @synthesize clientsQueue=_clientsQueue;
@property(readonly) struct dispatch_queue_s *serviceQueue; // @synthesize serviceQueue=_serviceQueue;
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)startListeningForConnectionsToService:(id)arg1;
- (void)resetState;
- (void)dumpState;
- (void)dumpDebugInfo;
- (void)downloadSessionDidFinishForProductKey:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (id)packageReferenceForPackageIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPreviousRef:(id)arg3;
- (void)_startDownloadingUpdateWithProduct:(id)arg1 completionBlock:(id)arg2;
- (void)_finishDownloadAndCleanupForProduct:(id)arg1;
- (void)downloadStatusForProductKey:(id)arg1 reply:(id)arg2;
- (void)backgroundDownloadDidResumeForSessionWithIdentifier:(id)arg1;
- (void)setCatalogTestMode:(id)arg1 withDevKeyHeader:(id)arg2 andData:(id)arg3;
- (void)addProductToDownload:(id)arg1 replyWhenDone:(id)arg2;
- (void)cancelDownloadForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)cancelDownloadForProductKey:(id)arg1;
- (void)_cancelDownloadOpForProductKeys:(id)arg1 fixupState:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)_cancelAllCurrentDownloads;
- (void)_setStateForProductKey:(id)arg1 newState:(unsigned long long)arg2;
- (id)_statusForProduct:(id)arg1 createIfMissing:(BOOL)arg2;
- (void)_installStatus:(id)arg1 didChangeForProductKey:(id)arg2;
- (id)_serviceConnection;
- (void)dealloc;
- (void)_initFromSavedState;
- (void)saveCurrentState;
- (BOOL)_unarchiveStateFrom:(id)arg1;
- (id)_archivedState;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 reply:(id)arg2;
- (BOOL)_isClientAuthorized;
- (void)_attemptToEnterDevKeyMode;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUSignedFlatPkg : NSObject
{
}

+ (int)_verifyProductArchive:(id)arg1 atPath:(id)arg2 minimumTrust:(int)arg3 error:(id *)arg4;
+ (int)_verifyComponentPackage:(id)arg1 atPath:(id)arg2 minimumTrust:(int)arg3 error:(id *)arg4;
+ (int)verifyPackageAtPath:(id)arg1 minimumTrust:(int)arg2 error:(id *)arg3;

@end

@interface SUUpdateServiceDaemon : NSObject <SUUpdateService, NSXPCListenerDelegate>
{
    NSXPCListener *_listener;
    NSMutableArray *_clients;
    NSMutableArray *_availableUpdates;
    SUProduct *_adoptedManualProduct;
    SUPowerAssertionManager *_powerAssertionManager;
    long long _didAutoInstallNotifyCount;
    NSMutableArray *_didAutoInstallNotifyStrings;
    NSMutableArray *_additionalPostLogoutInstallRequests;
    NSMutableDictionary *_productsInstalledAfterPostLogoutInstallDictionary;
    NSMutableDictionary *_additionalPackageDigestsByURL;
    NSDictionary *_principalUserCookie;
    struct dispatch_queue_s *_serviceQueue;
    struct dispatch_queue_s *_updateInfoQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    struct dispatch_queue_s *_backgroundActivityQueue;
    long long _lastThermalEmergencyCount;
    long long _retriesForBackgroundActivity;
    BOOL _postLogoutInstallWillHaveFLO;
    struct dispatch_source_s *_suspendWatchdogTimer;
}

+ (id)sharedUpdateServiceDaemon;
+ (id)daemonCacheDirectoryAppendedWithPath:(id)arg1;
- (BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)_takeAllValidAdditionalPostLogoutInstallRequests;
- (id)_addAdditionalPostLogoutInstallRequests:(id)arg1;
- (void)_runBackgroundActionsOnCurrentQueueIfAppropriate:(char *)arg1;
- (void)_installStateDidChangeForKeys:(id)arg1;
- (void)_refreshLocalUpdateObjects:(id)arg1 afterScan:(BOOL)arg2;
- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
- (void)resetServiceWithReply:(id)arg1;
- (void)dumpServiceDebugInfo;
- (void)suspendBackgroundTasksTemporarily:(BOOL)arg1 desiredDuration:(long long)arg2 reply:(id)arg3;
- (void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(id)arg2;
- (void)statusForUpdateWithProductKey:(id)arg1 reply:(id)arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(id)arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(id)arg2;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(id)arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(id)arg6;
- (void)stringRepresentationOfLongDescriptionForProductKey:(id)arg1 reply:(id)arg2;
- (void)stashURLCredential:(id)arg1;
- (void)commitLoginCredentialsDisablingFLO:(BOOL)arg1 finishBlock:(id)arg2;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 reply:(id)arg2;
- (void)_doTheCredsStashEnablingFLO:(BOOL)arg1 reply:(id)arg2;
- (void)productKeysToInstallAfterLogoutWithReply:(id)arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 shouldStashCredentials:(BOOL)arg4 reply:(id)arg5;
- (void)_updateProductForPostLogoutInstallResultsNotification:(id)arg1 withStatus:(id)arg2;
- (void)_setProductsForPostLogoutInstallResultsNotification:(id)arg1 nowIsLater:(BOOL)arg2;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(id)arg2;
- (void)startUpdatesForProductKeys:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 holdingBoostDuringInstall:(BOOL)arg3 usingForeground:(BOOL)arg4 clientBlocksRestart:(BOOL)arg5 allowOnlyAppleSigned:(BOOL)arg6 packageScriptUserID:(unsigned int)arg7 sendingStatusUpdates:(BOOL)arg8 replyWhenDone:(id)arg9;
- (void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startInstallingAdminUpdates:(id)arg1 replyWhenDone:(id)arg2;
- (void)startStagingUpdatesForProductKey:(id)arg1 usingForeground:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(BOOL)arg2 reply:(id)arg3;
- (void)deviceInitiatedScanWithReply:(id)arg1;
- (void)buildTagCacheIfNecessaryWithReply:(id)arg1;
- (void)markRampedUpdatesAsSeenWithReply:(id)arg1;
- (void)clearAllHiddenUpdatesWithReply:(id)arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(id)arg1;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 distributionEvalutionMetainfo:(id)arg3 installedPrinters:(id)arg4 preferredLocalizations:(id)arg5 replyWhenDone:(id)arg6;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(id)arg2 replyWhenDone:(id)arg3;
- (void)catalogAndScanInformationWithReply:(id)arg1;
- (void)catalogInformationWithReply:(id)arg1;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(id)arg1;
- (void)performDownloadAndStageWithProductKeys:(id)arg1 downloadOnly:(BOOL)arg2 stageOnly:(BOOL)arg3 reply:(id)arg4;
- (void)installStatus:(id)arg1 didChangeExternallyForProductKey:(id)arg2;
- (void)currentDevKeyModeWithReply:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (void)packageReferenceForMatchingIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPrevious:(BOOL)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(unsigned long long)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(id)arg3;
- (void)authorizeForManagingDaemonWithExternalFormData:(id)arg1 reply:(id)arg2;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(id)arg3;
- (void)_saveCurrentState;
- (BOOL)_unarchiveStateFrom:(id)arg1;
- (void)dumpArchiveState;
- (id)_archivedState;
- (id)_currentClients;
- (void)startListeningForConnections;
- (void)schedulePeriodicActions;
- (void)_scheduleTransientBackgroundActionWithDelay:(long long)arg1 grace:(long long)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUPublicKey : NSObject
{
}

+ (id)applePublicKeyData;
+ (id)applePublicKeyHeaderData;

@end

@interface SUBackgroundManager : NSObject
{
    NSMutableArray *_userVisibleUpdates;
    NSMutableArray *_configDataUpdates;
    NSMutableArray *_firmwareUpdates;
    NSMutableArray *_backgroundInstallCriticalUpdates;
    NSMutableArray *_registerForPostLogoutCriticalUpdates;
    NSMutableArray *_productsQueuedForStaging;
    NSMutableArray *_productsDownloadingInBackground;
    NSBackgroundActivityScheduler *_stageActivityScheduler;
    NSMutableSet *_errorUpdateKeys;
    long long _autoInstallNotifyCount;
    NSMutableArray *_autoInstallCustomNotifyStrings;
    NSMutableDictionary *_autoInstalledJournalEntries;
    BOOL _timeToScan;
    BOOL _doCriticalAndConfigDataOnly;
    BOOL _canDownloadAndStage;
    BOOL _wasScanIncomplete;
    NSError *_error;
    NSString *_catalogTestMode;
    struct AuthorizationOpaqueRef *_authRef;
    struct dispatch_queue_s *_productStateQueue;
    struct dispatch_queue_s *_backgroundOpsQueue;
    struct dispatch_queue_s *_modifyAuthQueue;
    BOOL _suspended;
    long long _numInflightOperations;
    NSSet *_previousIncompleteKeys;
}

+ (id)sharedBackgroundManager;
@property BOOL suspended; // @synthesize suspended=_suspended;
@property(retain) NSSet *previousIncompleteKeys; // @synthesize previousIncompleteKeys=_previousIncompleteKeys;
@property long long numInflightOperations; // @synthesize numInflightOperations=_numInflightOperations;
- (void)dumpDebugInfo;
- (void)resetState;
- (BOOL)shouldRetryAheadOfSchedule;
- (id)error;
- (id)incompleteProductKeys;
- (void)clearAutoInstalledUpdates;
- (id)autoInstalledJournalEntries;
- (id)autoInstallNotificationStrings;
- (long long)countOfUpdatesAutoInstalled;
- (void)_markPendingCriticalUpdateForPostLogoutInstallIfAppropriate:(id)arg1;
- (void)_stageProducts:(id)arg1 replyWhenDone:(id)arg2;
- (void)_scheduleStagingForQueuedProducts;
- (void)_pushProductToStage:(id)arg1;
- (id)_popProduct;
- (long long)_activityDelay;
- (BOOL)_shouldStageUpdate:(id)arg1;
- (void)_performBackgroundConfigDataInstallForProduct:(id)arg1;
- (void)addToAutoInstallJournalForProduct:(id)arg1 wasAdminAutoInstall:(BOOL)arg2;
- (void)cancelBackgroundDownloadIfNecessaryForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)downloadRecommendedUpdates;
- (BOOL)_authorizeForDownloadService;
- (void)clearAuthForDownloadService;
- (id)_appropriateProductsForAction:(long long)arg1;
- (BOOL)_isProductEligibleForAutoInstallOfRestartRequiredUpdates:(id)arg1;
- (void)installStatus:(id)arg1 didChangeExternallyForProductKey:(id)arg2;
- (long long)nextActionForProductKey:(id)arg1 returningProduct:(id *)arg2;
- (void)_reevaluateAvailableUpdatesIfNecessary;
- (BOOL)refreshAvailableUpdatesIfRequired;
- (BOOL)downloadAndStageUpdates:(id)arg1 doDownload:(BOOL)arg2 notifyWhenFinished:(BOOL)arg3 inForeground:(BOOL)arg4 withReply:(id)arg5;
- (BOOL)downloadUpdates:(id)arg1 notifyWhenFinished:(BOOL)arg2 inForeground:(BOOL)arg3 withReply:(id)arg4;
- (BOOL)_canDownloadAndStageUpdates;
- (void)evaluateAvailableUpdatesAndLog:(BOOL)arg1;
- (BOOL)_evaluateScanRequirements;
- (void)setCatalogTestMode:(id)arg1;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUURLConnection : PKURLConnection
{
}

+ (id)sessionID;
+ (id)sendSynchronousRequest:(id)arg1 returningResponse:(id *)arg2 error:(id *)arg3;
+ (void)initialize;

@end

@interface SULocalProduct : SUProduct
{
    NSString *_productPath;
    NSDictionary *_packageReferences;
    NSMutableSet *_mustCloseAppsToInstallProduct;
    SUProduct *_remoteProduct;
    NSURL *_altDistPackageURL;
}

- (int)restartAction;
- (id)mustCloseAppsToInstallProduct;
- (id)packageReferenceForPackageIdentifier:(id)arg1;
- (unsigned long long)installSize;
- (id)orderedPackageSpecifiersToInstall;
- (unsigned long long)sizeAlreadyDownloaded;
- (BOOL)isCompletelyDownloaded;
- (id)_localPackageReferenceFromDistribution:(id)arg1;
- (BOOL)hasInstallablePackages;
- (id)distributionEvaluationMetainfo;
- (id)distributionEnvironment;
- (id)distributionPath;
- (id)productPath;
- (void)dealloc;
- (id)initWithProduct:(id)arg1 productPath:(id)arg2 error:(id *)arg3;

@end

@interface SUDownloadCache : NSObject <NSFileManagerDelegate>
{
    struct dispatch_queue_s *_cacheQueue;
    NSFileManager *_fileManager;
}

+ (id)appCacheDirectory;
+ (id)_defaultDirectoryAttributes;
+ (id)_defaultFileAttributes;
+ (id)defaultCache;
- (BOOL)emptyCache;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 movingItemAtURL:(id)arg3 toURL:(id)arg4;
- (id)moveFromDownloadLocation:(id)arg1 toCacheForURL:(id)arg2 error:(id *)arg3;
- (void)setResumeData:(id)arg1 forURL:(id)arg2;
- (id)resumeDataForURL:(id)arg1;
- (unsigned long long)downloadedSizeForProduct:(id)arg1;
- (id)partialDownloadURLForURL:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUInstallOperation : NSOperation
{
    NSArray *_localProducts;
    PKInstallRequest *_request;
    BOOL _clientBlocksRestart;
    BOOL _allowOnlyAppleSignedFlatPackages;
    BOOL _holdBoostDuringInstall;
    BOOL _isStaging;
    unsigned int _packageScriptUserID;
    struct AuthorizationOpaqueRef *_overrideAuthorization;
    id <SUInstallOperationDelegate><NSObject> delegate;
    BOOL _didPreflight;
    BOOL _isInstalling;
    int _state;
    unsigned long long _totalSize;
    double _progressPercent;
    double _estimatedTimeRemaining;
    NSString *_firmwareStatus;
    double _lastFirmwareUpdateProgress;
    NSDate *_firmwareUpdateStalledAt;
    NSString *_activeSpecialStatus;
    BOOL _isDoingIndeterminateFirmwareUpdate;
    NSError *_nonSpecificError;
    NSMutableDictionary *_errorByProductKey;
    BOOL _didInstallSuccessfully;
    NSMutableArray *_productKeysToDelete;
    id _finishBlock;
    id _progressBlock;
    PKInstallClient *_installClient;
    unsigned long long _activityID;
}

+ (unsigned long long)workingSpaceForInstallSize:(unsigned long long)arg1;
+ (unsigned long long)adjustedInstallSize:(unsigned long long)arg1 forLocalProducts:(id)arg2;
+ (id)installOperationsWithLocalProducts:(id)arg1 forStaging:(BOOL)arg2;
+ (unsigned long long)_spaceRequiredForPossiblyStagedLocalProducts:(id)arg1;
+ (void)_enumerateProducts:(id)arg1 usingBlock:(id)arg2;
+ (BOOL)_isCurrentlyStagedWithLocalProducts:(id)arg1 purgeableSize:(id *)arg2;
@property unsigned long long activityID; // @synthesize activityID=_activityID;
@property unsigned int packageScriptUserID; // @synthesize packageScriptUserID=_packageScriptUserID;
@property BOOL holdBoostDuringInstall; // @synthesize holdBoostDuringInstall=_holdBoostDuringInstall;
@property BOOL allowOnlyAppleSignedFlatPackages; // @synthesize allowOnlyAppleSignedFlatPackages=_allowOnlyAppleSignedFlatPackages;
@property BOOL clientBlocksRestart; // @synthesize clientBlocksRestart=_clientBlocksRestart;
@property id <SUInstallOperationDelegate><NSObject> delegate; // @synthesize delegate;
- (void)installClientDidFinish:(id)arg1;
- (void)installClient:(id)arg1 didFailWithError:(id)arg2;
- (void)installClient:(id)arg1 currentState:(int)arg2 package:(id)arg3 progress:(double)arg4 timeRemaining:(double)arg5;
- (void)setProgressBlock:(id)arg1 andFinishBlock:(void)arg2;
- (id)errorForProductKey:(id)arg1;
- (id)errorProductKeys;
- (BOOL)didInstallSuccessfully;
- (BOOL)performPreflightChecks;
- (BOOL)_performInstallTimeChecks;
- (id)_productFromPackageKitError:(id)arg1;
- (void)main;
- (void)_dispatchStatus:(id)arg1 progress:(float)arg2 timeRemaining:(double)arg3;
- (void)setAuthorizationRef:(struct AuthorizationOpaqueRef *)arg1;
- (void)removeInstalledOrInapplicableProducts;
- (id)activeSpecialStatus;
- (BOOL)isDoingIndeterminateFirmwareUpdate;
- (double)estimatedTimeRemaining;
- (double)progressPercent;
- (BOOL)isStaging;
- (unsigned long long)totalInstallSize;
- (id)localProducts;
- (void)dealloc;
- (id)_initWithLocalProducts:(id)arg1 stageOnly:(BOOL)arg2 spaceRequired:(unsigned long long)arg3;

@end

@interface SUSharedPrefs : NSObject
{
    Class _helperProxyClass;
    NSDateFormatter *_formatter;
    NSArray *_inactiveLabels;
    NSArray *_waitingFirmwareProductKeys;
    NSArray *_primedFirmwareProductKeys;
    NSSet *_whitelistedUpdates;
    struct dispatch_queue_s *_cacheQueue;
    NSDictionary *_theDefaultsOverridePlist;
    NSString *_previousManagedPrefsPayloadUUID;
    NSSet *_updatesToInstall;
    struct dispatch_queue_s *_notifyQueue;
}

+ (id)currentSystemVersion;
+ (id)sharedPrefManager;
+ (BOOL)isAdminUser:(unsigned int)arg1;
- (id)init;
- (BOOL)shouldEvaluateCriticalIfUnchanged;
- (void)clearCriticalUpdateNotificationDate;
- (BOOL)shouldAutoInstallCriticalUpdatesNowForDelay:(long long)arg1;
- (BOOL)shouldInvertStagedAndActiveStatesForTestingOnProduction;
- (BOOL)enableSpecialTestMode;
- (BOOL)okayToUseThirdPartyTestMode;
- (BOOL)shouldConsiderOnlyStagedUpdates;
- (void)setWaitingFirmwareProductKeys:(id)arg1;
- (id)waitingFirmwareProductKeys;
- (void)setInactiveProductLabels:(id)arg1;
- (id)inactiveProductLabels;
- (BOOL)shouldCriticalAndConfigDataCheckFireNow;
- (BOOL)shouldPeriodicCheckFireNow;
- (BOOL)_shouldCheckUnderCurrentConditionsWithInterval:(double)arg1 sinceLastCheck:(id)arg2;
- (BOOL)shouldScanAfterSystemVersionChanged;
- (void)setOSXAutoUpdates:(BOOL)arg1;
- (BOOL)doesOSXAutoUpdates;
- (void)setAppStoreAutoUpdates:(BOOL)arg1;
- (BOOL)doesAppStoreAutoUpdates;
- (void)setAutomaticCriticalUpdateInstall:(BOOL)arg1;
- (BOOL)doesAutomaticCriticalUpdateInstall;
- (void)setAutomaticConfigDataInstall:(BOOL)arg1;
- (BOOL)doesAutomaticConfigDataInstall;
- (void)setBackgroundDownload:(BOOL)arg1;
- (BOOL)doesBackgroundDownload;
- (double)scanFrequencyInterval;
- (void)setCheckScheduled:(BOOL)arg1;
- (BOOL)isCheckScheduled;
- (id)catalogURL;
- (id)recommendedUpdateProductKeys;
- (void)setLastCheckAttemptSystemVersion;
- (id)lastCheckAttemptSystemVersion;
- (void)addPrimaryLanguageIfNecessary:(id)arg1;
- (void)removeAllRecommendedUpdates;
- (void)removeRecommendedUpdates:(id)arg1;
- (void)addRecommendedUpdates:(id)arg1;
- (void)setRecommendedUpdates:(id)arg1;
- (id)recommendedUpdates;
- (long long)lastRecommendedUpdatesAvailable;
- (long long)lastUpdatesAvailable;
- (void)setLastCheckResultCode:(int)arg1;
- (int)lastCheckResultCode;
- (void)setLastBackgroundCriticalAndConfigDataCheckSuccessfulDate:(id)arg1;
- (id)lastBackgroundCriticalAndConfigDataCheckSuccessfulDate;
- (void)setLastBackgroundCheckSuccessfulDate:(id)arg1;
- (id)lastBackgroundCheckSuccessfulDate;
- (void)setLastFullCheckSuccessfulDate:(id)arg1;
- (id)lastFullCheckSuccessfulDate;
- (void)setLastCheckSuccessfulDate:(id)arg1;
- (id)lastCheckSuccessfulDate;
- (id)productKeysForUpdateWhitelist;
- (BOOL)isUpdateWhitelistEnabled;
- (void)setDidSkipBackgroundDownloadLackingDiskSpace:(BOOL)arg1;
- (BOOL)didSkipBackgroundDownloadLackingDiskSpace;
- (void)setShouldSkipContentLocator:(BOOL)arg1;
- (BOOL)shouldSkipContentLocator;
- (void)setLastSessionCompletedSuccessfully:(BOOL)arg1;
- (BOOL)lastSessionCompletedSuccessfully;
- (void)updatePrefsIfNeeded;
- (id)objectForAnyUserPreference:(id)arg1 usingManaged:(BOOL)arg2 usingDefaultOverride:(BOOL)arg3;
- (id)_valueFromDefaultOverridePlist:(id)arg1;
- (void)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (id)objectForAnyUserPreference:(id)arg1;
- (BOOL)isValidAnyUserPreference:(id)arg1;
- (BOOL)useBackgroundNSURLSession;
- (void)reloadPreferences;

@end

@interface SUDownloadTaskManager : NSObject
{
    NSMutableDictionary *_taskIdentifierToPackageInfo;
    NSMutableDictionary *_errorsToPackageIdentifierDict;
    NSMutableDictionary *_numRetriesToPackageIdentifierDict;
    NSLock *_pkgInfoLock;
    NSLock *_errorLock;
    NSError *_lastError;
}

+ (id)sharedDownloadTaskManager;
@property(retain, nonatomic) NSError *lastError; // @synthesize lastError=_lastError;
- (id)description;
- (void)setPackageInfo:(id)arg1 forIdentifier:(id)arg2;
- (id)packageInfoForIdentifier:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)restoreFromCoder:(id)arg1;
- (void)archiveToCoder:(id)arg1;
- (BOOL)shouldRetryDownloadBasedOnLastErrorForPackageIdentifier:(id)arg1 isNetworkError:(char *)arg2;
- (id)lastErrorForPackageIdentifier:(id)arg1;
- (void)setLastError:(id)arg1 forPackageIdentifier:(id)arg2;

@end

@interface SUPredicateInstallController : NSObject
{
    NSMutableDictionary *_resources;
    id <NSObject><SUPredicateInstallControllerDelegate> _delegate;
    NSDate *_lastCacheRefreshAttempt;
    NSTask *_currentTask;
}

+ (id)_localizedErrorForCode:(int)arg1;
- (BOOL)_isSoftwareUpdateRunningWithPID:(id)arg1;
- (void)_softwareUpdateDidExitWithCode:(id)arg1;
- (void)_softwareUpdateDidExit:(id)arg1;
- (BOOL)_startSoftwareUpdateWithOptionsFile:(id)arg1;
- (id)_writeOptionsFileForPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (BOOL)_isUpdateUIAlreadyRunning;
- (id)_optionsFilePath;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 customTitle:(id)arg2 customIconPath:(id)arg3 assumeExist:(BOOL)arg4 confirmComplete:(BOOL)arg5;
- (BOOL)startUpdateUIWithPredicate:(id)arg1 confirmComplete:(BOOL)arg2;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
@property(copy) NSDictionary *installedPrintersPlist;
@property BOOL requireLicenseAgreement;
@property long long legalTextType;
@property(copy) NSURL *helpURL;
@property(copy) NSString *helpAnchor;
@property(copy) NSString *notFoundMessage;
@property(copy) NSString *busyMessage;
@property(copy) NSString *busyTitle;
@property(copy) NSString *noServerMessage;
@property(copy) NSString *noServerTitle;
@property(copy) NSString *noNetworkMessage;
@property(copy) NSString *noNetworkTitle;
@property(copy) NSString *title;
@property(copy) NSString *iconPath;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

@interface SUMetadataCache : NSObject
{
    NSString *_cachePath;
    NSMutableArray *_metadata;
    double _cacheAge;
}

+ (BOOL)isCacheCurrent;
- (BOOL)writeCacheToDisk;
- (id)cachedProductKeysMatchingPredicate:(id)arg1;
- (id)metadataMatchingPredicate:(id)arg1;
- (id)_metadataMatchingPredicate:(id)arg1 pruningProductKeys:(BOOL)arg2;
- (BOOL)addMetadataFromDistribution:(id)arg1 forProductKey:(id)arg2 isStaged:(BOOL)arg3;
- (void)clearCache;
- (double)existingCacheAge;
- (void)dealloc;
- (id)init;
- (id)initByReadingDiskCache:(BOOL)arg1;

@end

@interface SUPrinterScan : NSObject
{
}

+ (BOOL)runMakequeues;

@end

@interface SUHelperProxy : NSObject <SUHelperDProtocol>
{
    unsigned int _suhelperd_port;
    unsigned int _client_port;
    long long _currentRights;
    struct dispatch_queue_s *_q;
}

+ (id)sharedHelperProxyIfAvailable;
+ (id)sharedHelperProxy;
- (BOOL)_launchDaemonMode;
- (id)lookupURLCredentialInSystemKeychainForHost:(id)arg1 port:(long long)arg2;
- (BOOL)commitLoginCredentialsDisablingFLO:(BOOL)arg1;
- (BOOL)stashLoginCredentialsEnablingFLO:(BOOL)arg1;
- (BOOL)unenrollFromSeedProgram;
- (BOOL)setOSXAutoUpdate:(BOOL)arg1;
- (BOOL)setAppStoreAutoUpdate:(BOOL)arg1;
- (BOOL)clearCriticalUpdateNotificationDate;
- (BOOL)removeUpdatesAvailableCookie;
- (BOOL)createUpdatesAvailableCookie;
- (BOOL)updateAnyUserPreferences;
- (BOOL)clearAnyUserPreference:(id)arg1;
- (BOOL)setObject:(id)arg1 forAnyUserPreference:(id)arg2;
- (BOOL)getDigest:(id *)arg1 forPackageAtURL:(id)arg2;
- (BOOL)removeProductDirectoryForKey:(id)arg1;
- (BOOL)removeDistForProductKey:(id)arg1 withFilename:(id)arg2;
- (BOOL)createDirectoryForProductKey:(id)arg1 Firmware:(BOOL)arg2;
- (id)readUpdatesIndex;
- (BOOL)writeUpdatesIndex:(id)arg1;
- (BOOL)removeIndexFromUpdates;
- (BOOL)movePPDVersionCacheToUpdatesFromPath:(id)arg1;
- (BOOL)moveMetadataCacheToUpdatesFromPath:(id)arg1;
- (BOOL)removeMetadataCacheFromUpdates;
- (BOOL)moveInstalledPrintersToLibraryFromPath:(id)arg1;
- (BOOL)makeQueues;
- (BOOL)registerProductFile:(id)arg1 forProductKey:(id)arg2 firmware:(BOOL)arg3 trustLevel:(int *)arg4 keepOriginal:(BOOL)arg5;
- (BOOL)prepareLoginWindowForPostLogoutInstallWithNoConsoleUser;
- (void)checkAndFixPermissionsAtPath:(id)arg1 owner:(unsigned int)arg2;
- (int)prepareForLogoutAndInstall:(BOOL)arg1;
- (void)authorizeWithEmptyAuthorizationForRights:(long long)arg1;
- (BOOL)disconnect;
- (void)authorizeTool:(struct AuthorizationOpaqueRef *)arg1 forRights:(long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (BOOL)isAuthorizedForRights:(long long)arg1;
- (BOOL)_isAuthorized;

@end

@interface SUDownloadServiceClient : NSObject <SUDownloadServiceClient>
{
    NSXPCConnection *_connection;
}

+ (void)authorizeForUpdating:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 reply:(id)arg3;
- (void)downloadedUpdatesDidChange:(id)arg1;
- (void)invalidate;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUProductDownloader : NSOperation <SUURLSessionDownloadDelegate>
{
    SUProduct *_product;
    BOOL _backgroundPriority;
    unsigned long long _totalLength;
    unsigned long long _finishedLength;
    BOOL _isCancelled;
    struct dispatch_queue_s *_opQueue;
    NSError *_error;
    SUURLSessionDownload *_session;
}

@property BOOL backgroundPriority; // @synthesize backgroundPriority=_backgroundPriority;
- (id)error;
- (BOOL)isCancelled;
- (float)averageBytesPerSecond;
- (double)progress;
- (long long)totalLength;
- (long long)currentLength;
- (void)cancel;
- (void)saveCurrentState;
- (void)downloadSessionDidFinishForProductKey:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (id)packageReferenceForPackageIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPreviousRef:(id)arg3;
- (void)main;
- (id)product;
- (void)dealloc;
- (id)initWithProduct:(id)arg1;

@end

@interface SUDevKey : NSObject <NSSecureCoding>
{
    NSLock *_waitingLock;
    BOOL _waitingForNetwork;
    NSData *_sDevKeyHeaderData;
    NSData *_sDevKeyData;
}

+ (BOOL)canLoadDevKey;
+ (id)sharedDevKey;
+ (BOOL)supportsSecureCoding;
@property(readonly, nonatomic) NSData *sDevKeyData; // @synthesize sDevKeyData=_sDevKeyData;
@property(readonly, nonatomic) NSData *sDevKeyHeaderData; // @synthesize sDevKeyHeaderData=_sDevKeyHeaderData;
- (id)devKeyData;
- (id)devKeyHeaderData;
- (BOOL)_loadDevKeyIfNeeded;
- (void)_waitAndDownloadWhenNetworkAvailableWithRequest:(id)arg1;
- (BOOL)_parseKeysFromData:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)setHeaderData:(id)arg1 andData:(id)arg2;

@end

@interface SUSoftwareUpdateController : NSObject
{
    NSXPCConnection *_connection;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _destroyAuthRef;
    BOOL _didSendAuth;
    id <SUSoftwareUpdateControllerDelegate> _delegate;
    SUPowerSourceMonitor *_powerMonitor;
    BOOL _requireACPower;
    NSDictionary *_installedPrintersPlist;
    NSError *_lastCantStartError;
    NSArray *_availableUpdates;
    NSSet *_availableUpdateProductKeys;
    struct dispatch_queue_s *_updateQueue;
    double _progressPercentage;
    NSPredicate *_currentPredicate;
    NSArray *_matchingUpdates;
    NSArray *_matchingUpdateKeys;
    long long _currentState;
    double _estimatedTimeForCurrentState;
    double _currentProgressFraction;
    unsigned long long _downloadedSize;
    unsigned long long _totalSize;
    struct dispatch_semaphore_s *_runningUpdate;
    struct dispatch_source_s *_timerSource;
    BOOL _doingFallbackScan;
    BOOL _didCancel;
    NSDictionary *_evaluationMetaInfo;
    NSWindow *_windowForSheet;
}

@property(readonly) unsigned long long totalSize; // @synthesize totalSize=_totalSize;
@property(readonly) unsigned long long downloadedSize; // @synthesize downloadedSize=_downloadedSize;
@property(readonly) long long currentState; // @synthesize currentState=_currentState;
@property(readonly) double estimatedTimeForCurrentState; // @synthesize estimatedTimeForCurrentState=_estimatedTimeForCurrentState;
@property(readonly) double progressPercentage; // @synthesize progressPercentage=_progressPercentage;
@property(copy) NSDictionary *installedPrintersPlist; // @synthesize installedPrintersPlist=_installedPrintersPlist;
@property(retain) NSWindow *windowForSheet; // @synthesize windowForSheet=_windowForSheet;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
@property(retain) NSDictionary *evaluationMetaInfo; // @synthesize evaluationMetaInfo=_evaluationMetaInfo;
- (id)_errorWithCode:(long long)arg1 userInfo:(id)arg2 underlyingError:(id)arg3 recoveryAction:(id)arg4;
- (void)_closeNecessaryApplicationsWithCompletionHandler:(id)arg1;
- (void)_checkAndInstallMatchingUpdatesWithCompletionHandler:(id)arg1;
- (void)_runWithCompletionHandler:(id)arg1;
- (BOOL)_determineUpdatesToInstallFromAvailable:(id)arg1 filterKey:(id)arg2;
- (void)_notifyUpdateEndedWithError:(id)arg1 didCancel:(BOOL)arg2 signalRunning:(BOOL)arg3;
- (void)_notifyCanUpdateChanged;
- (void)_setAndNotifyEstimatedTimeForCurrentState:(double)arg1;
- (void)_clearAndNotifyProgressPercentage;
- (void)_setAndNotifyProgressPercentage:(double)arg1;
- (void)_setAndNotifyCurrentState:(long long)arg1;
- (BOOL)cancelUpdate;
@property(readonly) BOOL canCancelUpdate;
- (void)_updateProgressParameters;
- (void)startUpdateInBackgroundWithPredicate:(id)arg1;
- (id)metadataOfCachedProductsMatchingPredicate:(id)arg1;
- (id)tagsOfCachedProductsMatchingPredicate:(id)arg1;
- (long long)countOfCachedProductsMatchingPredicate:(id)arg1;
- (BOOL)isCacheCurrent;
- (BOOL)_canStartUpdateWithPredicate:(id)arg1 error:(id *)arg2;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)_authorizeNowIfNeeded;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (BOOL)needsAuthorization;
- (BOOL)_connectToService;
- (void)finalize;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 localizedProductName:(id)arg2;
- (void)startAdminUpdatesInBackground:(id)arg1 replyWhenDone:(id)arg2;
- (void)catalogAndScanInfoWithReply:(id)arg1;
- (void)queryForAvailableUpdatesWithReply:(id)arg1;
- (void)initiateBackgroundScanIfNecessary:(BOOL)arg1 replyWhenDone:(id)arg2;
- (void)_queryForAvailableUpdatesWithCompletionHandler:(id)arg1;
- (void)_setAvailableUpdates:(id)arg1 currentStatus:(id)arg2;

@end

@interface SUSoftwareUpdateErrorHandler : NSObject
{
    long long _code;
    id _action;
}

- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)_launchNetworkDiagnosticsForError:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithErrorCode:(long long)arg1 action:(id)arg2;

@end

@interface SUPowerSourceMonitor : NSObject
{
    struct __CFRunLoopSource *_powerRunLoopSource;
    struct dispatch_queue_s *_notifyQueue;
    id _notifyBlock;
    BOOL _isAC;
}

+ (BOOL)isSafeToAutoInstallGivenCurrentPowerSources;
+ (BOOL)isRunningOnACPower;
- (void)_stopObservingPowerSource;
- (void)_startObservingPowerSource;
- (void)_handleChangeInPowerSource;
- (void)stop;
- (void)start;
- (void)finalize;
- (void)dealloc;
- (id)initWithQueue:(struct dispatch_queue_s *)arg1 usingBlock:(id)arg2;

@end

@interface SUAdminInstallController : NSObject
{
    struct dispatch_queue_s *_installQueue;
    struct dispatch_queue_s *_updatesToInstallStackQueue;
    NSMutableArray *_updatesToInstallStack;
}

+ (id)sharedAdminInstallController;
- (void)startInstallingAdminUpdates:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 allowOnlyAppleSigned:(BOOL)arg3 replyWhenDone:(id)arg4;
- (void)_dumpAuthForDebugging:(struct AuthorizationOpaqueRef *)arg1;
- (void)_doPostDownloadActionsForAdminInitiatedUpdateForProduct:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 withAction:(long long)arg3 replyWhenDone:(id)arg4;
- (void)_pushAdminUpdate:(id)arg1;
- (id)_popAdminUpdate;
- (id)init;

@end

@interface SUReachabilityMonitor : NSObject
{
    struct __SCNetworkReachability *_reachability;
    struct dispatch_queue_s *_notifyQueue;
    NSString *_hostName;
    NSString *_directHostName;
    BOOL _observing;
    id _notifyBlock;
}

+ (id)_directHostToCheckConsideringProxy:(id)arg1;
+ (BOOL)_isHostReachableWithFlags:(unsigned int)arg1;
+ (BOOL)waitForNetworkAvailabilityWithTimeout:(long long)arg1 forHost:(id)arg2;
+ (BOOL)isHostReachable:(id)arg1;
- (void)_handleChangeInReachability:(unsigned int)arg1;
- (void)_stopListeningForReachabilityChanges;
- (BOOL)_startListeningForReachabilityChanges;
- (void)stop;
- (void)start;
- (BOOL)isHostReachable;
- (void)finalize;
- (void)dealloc;
- (id)initWithHostName:(id)arg1 notifyQueue:(struct dispatch_queue_s *)arg2 usingBlock:(id)arg3;

@end

@interface SUAppStoreUpdateController : NSObject <SUUpdateClient>
{
    NSXPCConnection *_conn;
    NSLock *_connectionLock;
    NSArray *_currentUpdates;
    NSArray *_queuedUpdates;
    struct dispatch_queue_s *_q;
    BOOL _requireACPower;
    SUPowerSourceMonitor *_powerMonitor;
    struct dispatch_queue_s *_scanAndSessionQ;
    NSError *_lastCantStartError;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _didSendAuth;
    BOOL _destroyAuthRef;
    BOOL _serviceInterrupted;
    long long _numServiceInterruptionsDetected;
    struct dispatch_queue_s *_authQueue;
    NSLock *_statusTimerLock;
    NSURLCredential *_sharedURLCredential;
}

+ (id)_errorWithCode:(long long)arg1 userInfo:(id)arg2 underlyingError:(id)arg3;
+ (id)keyPathsForValuesAffectingCanStartUpdate;
+ (id)sharedUpdateController;
@property(retain) NSURLCredential *sharedURLCredential; // @synthesize sharedURLCredential=_sharedURLCredential;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
- (id)_lookupURLCredentialsFromUserKeychain:(id)arg1;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;
- (BOOL)resetIgnoredUpdates;
- (BOOL)hasIgnoredUpdates;
- (id)_ignoredUpdateKeys;
- (BOOL)ignoreUpdate:(id)arg1;
- (BOOL)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 error:(id *)arg2;
- (void)cancelOperation:(id)arg1;
- (BOOL)_shouldStashLoginCredentialsForUpdates:(id)arg1;
- (id)updatesToBeInstalledLater;
- (BOOL)removeAllUpdatesFromInstallLater;
- (BOOL)installUpdatesLater:(id)arg1;
- (id)updatesToBeInstalledAfterLogout;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2 nowIsLater:(BOOL)arg3;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2;
- (id)startDownloadingPostLogoutUpdates:(id)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(id)arg3 finish:(void)arg4;
- (BOOL)isDownloadRequiredForPostLogoutUpdates:(id)arg1;
- (id)startInstallingUpdates:(id)arg1 notifyOn:(struct dispatch_queue_s *)arg2 progress:(id)arg3 finish:(void)arg4;
- (id)startInstallingUpdates:(id)arg1 notifyOn:(struct dispatch_queue_s *)arg2 usingForeground:(BOOL)arg3 progress:(id)arg4 finish:(void)arg5;
- (id)_dictFromUpdateStatus:(id)arg1;
- (id)_startSessionForUpdates:(id)arg1 withInstall:(BOOL)arg2 usingForeground:(BOOL)arg3 notifyOn:(struct dispatch_queue_s *)arg4 progress:(id)arg5 finish:(void)arg6;
- (BOOL)_authorizeIfNeeded:(BOOL)arg1;
- (id)applicationIdentifiersToCloseForUpdates:(id)arg1;
- (unsigned long long)diskSpaceRequiredForUpdates:(id)arg1;
- (long long)actionRequiredForUpdates:(id)arg1;
- (id)_updatesFromProductKeys:(id)arg1;
- (id)_productKeysFromUpdates:(id)arg1;
- (BOOL)isSeedCatalog;
- (int)catalogTrustLevel;
- (id)catalogHostName;
- (void)_retrieveCatalogInformationWithCompletionHandler:(id)arg1;
- (id)startScanningForUpdatesIncludingPrerelease:(BOOL)arg1 rampedUnseen:(BOOL)arg2 evenIfUnchanged:(BOOL)arg3 notifyOn:(struct dispatch_queue_s *)arg4 progress:(id)arg5 finish:(void)arg6;
- (id)_shortDescriptionOfUpdates:(id)arg1;
- (void)_queryForAvailableUpdatesWithCompletionHandler:(id)arg1;
- (void)_setAvailableUpdatesAndNotify:(id)arg1 currentStatus:(id)arg2;
- (id)availableUpdates;
- (void)_updateCanStartUpdate:(id)arg1;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (void)_softwareUpdateDaemonStarted:(id)arg1;
- (id)_connection;
- (void)dealloc;
- (id)init;
- (BOOL)installQueuedUpdatesAfterNextLogoutRestartingNow:(BOOL)arg1;
- (id)startDownloadingPostLogoutQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(id)arg2 finish:(void)arg3;
- (BOOL)isDownloadRequiredForPostLogoutQueuedUpdates;
- (id)startInstallingQueuedUpdatesAndNotifyOn:(struct dispatch_queue_s *)arg1 progress:(id)arg2 finish:(void)arg3;
- (id)applicationIdentifiersToCloseForQueuedUpdates;
- (unsigned long long)diskSpaceRequiredForQueuedUpdates;
- (long long)actionRequiredForQueuedUpdates;
- (id)_queuedProductKeys;
- (id)queuedUpdates;
- (BOOL)dequeueUpdate:(id)arg1;
- (BOOL)enqueueUpdate:(id)arg1;
- (void)_setQueuedUpdatesAndNotify:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUAppStoreUpdate : NSObject <NSSecureCoding>
{
    SUUpdateProduct *_product;
    NSError *_updateError;
    long long _lastState;
    struct dispatch_queue_s *_q;
    NSString *_longDescriptionString;
    NSXPCConnection *_connection;
}

+ (BOOL)_connectToService;
+ (BOOL)supportsSecureCoding;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) NSString *longDescriptionString; // @synthesize longDescriptionString=_longDescriptionString;
@property(readonly) BOOL canRetry;
@property(readonly, retain) NSError *updateError;
@property(readonly, retain) NSArray *applicationIdentifiersToClose;
@property(readonly, retain) NSURL *customURLForPostInstallNotification;
@property(readonly, retain) NSString *customTextForPostInstallNotification;
@property(readonly, retain) NSString *customTitleForPostInstallNotification;
@property(readonly) BOOL showPostInstallNotification;
@property(readonly) long long autoInstallWithDelayInHours;
@property(readonly) BOOL isCritical;
@property(readonly) BOOL allowedToUseInstallLater;
@property(readonly) BOOL isRamped;
@property(readonly) BOOL isRecommended;
@property(readonly, retain) id auxInfo;
@property(readonly, retain) NSArray *tags;
@property(readonly, retain) NSString *productKey;
@property(readonly, retain) NSAttributedString *firmwareWarning;
@property(readonly, retain) NSAttributedString *licenseAgreement;
@property(readonly, retain) NSString *currentLocalization;
@property(readonly) long long action;
@property(readonly, retain) NSString *longDescription;
@property(readonly, retain) NSString *versionString;
@property(readonly, retain) NSString *title;
- (id)description;
- (void)_setCurrentStatus:(id)arg1;
- (void)_setProduct:(id)arg1;
- (id)_product;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)_initWithProduct:(id)arg1;

@end

@interface _SUAttributedStringWebResourceLoadDelegate : NSObject
{
}

- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;

@end

@interface SUAdminUpdate : NSObject <NSSecureCoding>
{
    BOOL _useDoItLaterWhenAppropriate;
    NSString *_productKey;
    long long _adminAction;
    long long _restartTimeInterval;
}

+ (BOOL)supportsSecureCoding;
@property BOOL useDoItLaterWhenAppropriate; // @synthesize useDoItLaterWhenAppropriate=_useDoItLaterWhenAppropriate;
@property long long restartTimeInterval; // @synthesize restartTimeInterval=_restartTimeInterval;
@property(readonly) long long adminAction; // @synthesize adminAction=_adminAction;
@property(readonly, retain) NSString *productKey; // @synthesize productKey=_productKey;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1 adminAction:(long long)arg2;

@end

@interface SUAdminAvailableUpdate : NSObject
{
    BOOL _criticalUpdate;
    BOOL _configDataUpdate;
    BOOL _firmwareUpdate;
    BOOL _restartRequiredUpdate;
    BOOL _allowedToUseDoItLater;
    NSString *_productKey;
    NSString *_title;
    NSString *_version;
    NSArray *_applicationIdentifiersToClose;
    NSString *_serverMetadataURL;
    NSString *_currentLocalization;
}

@property(readonly) NSString *currentLocalization; // @synthesize currentLocalization=_currentLocalization;
@property(readonly) NSString *serverMetadataURL; // @synthesize serverMetadataURL=_serverMetadataURL;
@property(readonly) NSArray *applicationIdentifiersToClose; // @synthesize applicationIdentifiersToClose=_applicationIdentifiersToClose;
@property(readonly) NSString *version; // @synthesize version=_version;
@property(readonly) NSString *title; // @synthesize title=_title;
@property(readonly) NSString *productKey; // @synthesize productKey=_productKey;
@property(readonly) BOOL allowedToUseDoItLater; // @synthesize allowedToUseDoItLater=_allowedToUseDoItLater;
@property(readonly) BOOL restartRequiredUpdate; // @synthesize restartRequiredUpdate=_restartRequiredUpdate;
@property(readonly) BOOL firmwareUpdate; // @synthesize firmwareUpdate=_firmwareUpdate;
@property(readonly) BOOL configDataUpdate; // @synthesize configDataUpdate=_configDataUpdate;
@property(readonly) BOOL criticalUpdate; // @synthesize criticalUpdate=_criticalUpdate;
- (id)description;
- (id)initWithUpdateProduct:(id)arg1;

@end

@interface SUPowerAssertionManager : NSObject
{
    NSMutableDictionary *_assertionDict;
}

- (void)cancelPowerAssertionWithDescription:(id)arg1;
- (void)createPowerAssertionWithType:(struct __CFString *)arg1 timeout:(double)arg2 andDescription:(id)arg3;
- (void)createPowerAssertionWithDescription:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUScanController : NSObject
{
    NSMutableArray *_availableProducts;
    NSMutableDictionary *_productByKey;
    NSURL *_catalogURLFromPrefs;
    NSURL *_appleCatalogURLFromPrefs;
    NSURL *_catalogURL;
    int _catalogTrustLevel;
    NSArray *_preferredLocalizationsForLastClient;
    long long _scanState;
    SUScan *_scanInProgress;
    NSError *_lastScanError;
    NSDate *_lastCmdRScanCompleted;
    struct dispatch_queue_s *_updateInfoQueue;
    struct dispatch_queue_s *_scanRefreshQueue;
    struct dispatch_queue_s *_scanStateQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    BOOL _deviceInitiated;
    BOOL _lastScanForeground;
    BOOL _lastScanCmdR;
    id _availableProductsDidChangeHandler;
    id _catalogURLDidChangeHandler;
}

+ (id)sharedScanController;
@property(copy) id catalogURLDidChangeHandler; // @synthesize catalogURLDidChangeHandler=_catalogURLDidChangeHandler;
@property(copy) id availableProductsDidChangeHandler; // @synthesize availableProductsDidChangeHandler=_availableProductsDidChangeHandler;
- (void)_handleUpdateWhitelistDidChangeNotification:(id)arg1;
- (void)populateTagCache:(id)arg1;
- (void)removeInapplicableLocalProducts;
- (void)clearAllHidden;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2;
- (void)markFirmwareProductKeysAsWaiting:(id)arg1;
- (BOOL)checkForChangeInCatalogURL;
- (void)markRampedUpdatesAsSeen;
- (void)_clearCriticalUpdateNotificationDateIfAppropriate;
- (void)removeAvailableProductsWithKeys:(id)arg1;
- (double)currentRefreshProgress;
- (BOOL)_wasSoftwareInstalledSinceLastScan;
- (void)_refreshAvailableUpdatesFromScan:(id)arg1;
- (void)refreshAvailableProductsInForeground:(BOOL)arg1 limitedToChanged:(BOOL)arg2 evenIfConfigurationChanged:(BOOL)arg3 initiatedByDeviceConnection:(BOOL)arg4 limitedToProductKeys:(id)arg5 forCurrentConfiguration:(BOOL)arg6 distributionEnvironment:(id)arg7 distributionEvalutionMetainfo:(id)arg8 installedPrinters:(id)arg9 preferredLocalizations:(id)arg10 finish:(id)arg11;
- (id)availableProductsForKeys:(id)arg1;
- (id)availableProductForKey:(id)arg1;
- (id)_shortDescriptionOf:(id)arg1;
- (id)_logScanResultsWithProducts:(id)arg1;
- (BOOL)deviceInitiated;
- (id)availableProducts;
- (BOOL)isAppleSeedCatalog;
- (BOOL)isDefaultAppleCatalog;
- (int)catalogTrustLevel;
- (id)catalogURL;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)dumpStateFromCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUManualProductAdopter : NSObject
{
    NSXPCConnection *_connection;
    NSString *_archivePath;
    NSString *_displayName;
    NSString *_displayVersion;
    BOOL _allowDevSigned;
    BOOL _didFail;
    BOOL _shouldStashCredentials;
}

+ (BOOL)restartNow;
@property BOOL allowDevSigned; // @synthesize allowDevSigned=_allowDevSigned;
@property(copy) NSString *displayVersion; // @synthesize displayVersion=_displayVersion;
@property(copy) NSString *displayName; // @synthesize displayName=_displayName;
- (BOOL)installAfterLogoutRestartingNow:(BOOL)arg1;
- (BOOL)adoptReturningError:(id *)arg1;
- (BOOL)authorize:(struct AuthorizationOpaqueRef *)arg1;
- (void)dealloc;
- (id)initWithManualProductArchiveAtPath:(id)arg1 error:(id *)arg2;

@end

@interface SUUpdateProduct : NSObject <NSSecureCoding>
{
    BOOL _allowedToUseInstallLater;
    BOOL _shouldAuthenticateReboot;
    BOOL _shouldLaunchFirstLoginOptimization;
    BOOL _doItLaterUpdateAndNowIsLater;
    BOOL _isFirmwareUpdate;
    BOOL _showPostInstallNotification;
    int _action;
    NSString *_title;
    NSString *_versionString;
    NSString *_currentLocalization;
    NSData *_longDescriptionData;
    NSString *_longDescriptionMIMEType;
    NSData *_licenseAgreementData;
    NSString *_licenseAgreementMIMEType;
    NSData *_firmwareWarningData;
    NSString *_firmwareWarningMIMEType;
    NSString *_productKey;
    long long _serverState;
    long long _type;
    NSArray *_applicationIdentifiersToClose;
    NSArray *_tags;
    id _auxInfo;
    NSString *_identifierForProductLabel;
    NSString *_versionForProductLabel;
    NSString *_serverMetadataURL;
    NSDictionary *_matchingDictionary;
    NSArray *_packageIdentifiersToInstall;
    long long _downloadSize;
    long long _shouldAutoInstallWithDelayInHours;
    NSString *_customCriticalNotificationTitle;
    NSString *_customCriticalNotificationText;
    NSString *_customTitleForPostInstallNotification;
    NSString *_customTextForPostInstallNotification;
    NSURL *_customURLForPostInstallNotification;
}

+ (id)stringForUpdateType:(long long)arg1;
+ (id)stringForUpdateState:(long long)arg1;
+ (BOOL)supportsSecureCoding;
@property(readonly, retain) NSURL *customURLForPostInstallNotification; // @synthesize customURLForPostInstallNotification=_customURLForPostInstallNotification;
@property(readonly, retain) NSString *customTextForPostInstallNotification; // @synthesize customTextForPostInstallNotification=_customTextForPostInstallNotification;
@property(readonly, retain) NSString *customTitleForPostInstallNotification; // @synthesize customTitleForPostInstallNotification=_customTitleForPostInstallNotification;
@property(readonly) BOOL showPostInstallNotification; // @synthesize showPostInstallNotification=_showPostInstallNotification;
@property(readonly, retain) NSString *customCriticalNotificationText; // @synthesize customCriticalNotificationText=_customCriticalNotificationText;
@property(readonly, retain) NSString *customCriticalNotificationTitle; // @synthesize customCriticalNotificationTitle=_customCriticalNotificationTitle;
@property(readonly) long long shouldAutoInstallWithDelayInHours; // @synthesize shouldAutoInstallWithDelayInHours=_shouldAutoInstallWithDelayInHours;
@property BOOL isFirmwareUpdate; // @synthesize isFirmwareUpdate=_isFirmwareUpdate;
@property BOOL doItLaterUpdateAndNowIsLater; // @synthesize doItLaterUpdateAndNowIsLater=_doItLaterUpdateAndNowIsLater;
@property(readonly) long long downloadSize; // @synthesize downloadSize=_downloadSize;
@property(readonly) NSArray *packageIdentifiersToInstall; // @synthesize packageIdentifiersToInstall=_packageIdentifiersToInstall;
@property(readonly, retain) NSDictionary *matchingDictionary; // @synthesize matchingDictionary=_matchingDictionary;
@property(readonly) BOOL shouldLaunchFirstLoginOptimization; // @synthesize shouldLaunchFirstLoginOptimization=_shouldLaunchFirstLoginOptimization;
@property(readonly) BOOL shouldAuthenticateReboot; // @synthesize shouldAuthenticateReboot=_shouldAuthenticateReboot;
@property(readonly) BOOL allowedToUseInstallLater; // @synthesize allowedToUseInstallLater=_allowedToUseInstallLater;
@property(readonly, retain) NSString *serverMetadataURL; // @synthesize serverMetadataURL=_serverMetadataURL;
@property(readonly, retain) NSString *versionForProductLabel; // @synthesize versionForProductLabel=_versionForProductLabel;
@property(readonly, retain) NSString *identifierForProductLabel; // @synthesize identifierForProductLabel=_identifierForProductLabel;
@property(readonly, retain) id auxInfo; // @synthesize auxInfo=_auxInfo;
@property(readonly, retain) NSArray *tags; // @synthesize tags=_tags;
@property(readonly, retain) NSArray *applicationIdentifiersToClose; // @synthesize applicationIdentifiersToClose=_applicationIdentifiersToClose;
@property(readonly) long long type; // @synthesize type=_type;
@property(readonly) long long serverState; // @synthesize serverState=_serverState;
@property(readonly, retain) NSString *productKey; // @synthesize productKey=_productKey;
@property(readonly, retain) NSString *firmwareWarningMIMEType; // @synthesize firmwareWarningMIMEType=_firmwareWarningMIMEType;
@property(readonly, retain) NSData *firmwareWarningData; // @synthesize firmwareWarningData=_firmwareWarningData;
@property(readonly, retain) NSString *licenseAgreementMIMEType; // @synthesize licenseAgreementMIMEType=_licenseAgreementMIMEType;
@property(readonly, retain) NSData *licenseAgreementData; // @synthesize licenseAgreementData=_licenseAgreementData;
@property(readonly, retain) NSString *longDescriptionMIMEType; // @synthesize longDescriptionMIMEType=_longDescriptionMIMEType;
@property(readonly, retain) NSData *longDescriptionData; // @synthesize longDescriptionData=_longDescriptionData;
@property(readonly, retain) NSString *currentLocalization; // @synthesize currentLocalization=_currentLocalization;
@property(readonly) int action; // @synthesize action=_action;
@property(readonly, retain) NSString *versionString; // @synthesize versionString=_versionString;
@property(readonly, retain) NSString *title; // @synthesize title=_title;
- (id)updateLabel;
- (id)licenseAgreement;
- (id)firmwareWarning;
- (id)stringRepresentationOfLongDescription;
- (id)longDescription;
- (id)debugDescription;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSUProduct:(id)arg1;

@end

@interface SUScan : NSObject
{
    NSURL *catalogURL;
    NSArray *previousProducts;
    NSArray *preferredLocalizations;
    BOOL dontRunMakeQueues;
    NSDictionary *installedPrinters;
    BOOL shouldBuildCacheOnly;
    NSArray *filteredProductKeys;
    BOOL ignorePPDVersionCache;
    NSDictionary *distributionEnvironment;
    BOOL isBackgroundScan;
    double _progressValue;
    BOOL _isExecuting;
    int _productsCount;
    int _productsComplete;
    struct dispatch_queue_s *_stateQueue;
    NSArray *installableProducts;
    NSMutableArray *_packageSources;
    NSError *_error;
    BOOL _didLoadAllResourcesSuccessfully;
    NSDictionary *_distributionEvaluationMetainfo;
}

+ (long long)_resultCodeFromScan:(id)arg1;
@property(retain) NSDictionary *distributionEvaluationMetainfo; // @synthesize distributionEvaluationMetainfo=_distributionEvaluationMetainfo;
@property BOOL isBackgroundScan; // @synthesize isBackgroundScan;
@property(retain) NSDictionary *distributionEnvironment; // @synthesize distributionEnvironment;
@property BOOL ignorePPDVersionCache; // @synthesize ignorePPDVersionCache;
@property(retain) NSArray *filteredProductKeys; // @synthesize filteredProductKeys;
@property BOOL shouldBuildCacheOnly; // @synthesize shouldBuildCacheOnly;
@property(retain) NSDictionary *installedPrinters; // @synthesize installedPrinters;
@property BOOL dontRunMakeQueues; // @synthesize dontRunMakeQueues;
@property(retain) NSArray *preferredLocalizations; // @synthesize preferredLocalizations;
@property(retain) NSArray *previousProducts; // @synthesize previousProducts;
@property(retain) NSURL *catalogURL; // @synthesize catalogURL;
- (bycopy id)installableProducts;
- (BOOL)hasInstallableProducts;
- (BOOL)didLoadAllResourcesSuccessfully;
- (id)error;
- (BOOL)isFinished;
- (double)progressValue;
- (BOOL)isExecuting;
- (void)performSynchronousScan;
- (void)start;
- (void)_updatePackageSourcesWithCatalog:(id)arg1;
- (void)_scanMain:(id)arg1;
- (id)_clientDescription;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface SUUpdateStatus : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_productKey;
    unsigned long long _installState;
    long long _activePhases;
    NSError *_error;
    unsigned long long _totalBytes;
    unsigned long long _downloadedBytes;
    double _estimatedTimeRemainingForDownload;
    double _installProgressPercent;
    double _estimatedTimeRemainingForInstall;
    NSString *_specialInstallStatus;
}

+ (BOOL)isActiveInstallState:(unsigned long long)arg1;
+ (id)stringForInstallState:(unsigned long long)arg1;
+ (BOOL)supportsSecureCoding;
@property(copy, nonatomic) NSString *specialInstallStatus; // @synthesize specialInstallStatus=_specialInstallStatus;
@property(nonatomic) double estimatedTimeRemainingForInstall; // @synthesize estimatedTimeRemainingForInstall=_estimatedTimeRemainingForInstall;
@property(nonatomic) double installProgressPercent; // @synthesize installProgressPercent=_installProgressPercent;
@property(nonatomic) double estimatedTimeRemainingForDownload; // @synthesize estimatedTimeRemainingForDownload=_estimatedTimeRemainingForDownload;
@property(nonatomic) unsigned long long downloadedBytes; // @synthesize downloadedBytes=_downloadedBytes;
@property(nonatomic) unsigned long long totalBytes; // @synthesize totalBytes=_totalBytes;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) long long activePhases; // @synthesize activePhases=_activePhases;
@property(nonatomic) unsigned long long installState; // @synthesize installState=_installState;
@property(readonly, copy) NSString *productKey; // @synthesize productKey=_productKey;
@property(readonly, nonatomic) double estimatedTimeRemaining;
@property(readonly, nonatomic) double progressPercent;
- (id)description;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProductKey:(id)arg1;

@end

@interface SUPackageSource : NSObject <NSSecureCoding, PKPackageSource>
{
    SUCatalog *_catalog;
    BOOL _packageSourceIsValid;
}

+ (BOOL)supportsSecureCoding;
@property(retain) SUCatalog *catalog; // @synthesize catalog=_catalog;
@property BOOL packageSourceIsValid; // @synthesize packageSourceIsValid=_packageSourceIsValid;
- (id)allPackageReferences;
- (BOOL)doScanFinishedOps;
- (id)digestForPackageAtURLPath:(id)arg1;
- (BOOL)registerProduct:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCatalog:(id)arg1;

@end

@interface SUUpdateSession : NSObject
{
    NSMutableDictionary *_updateStatusByKey;
    NSMutableDictionary *_initiatedDownloads;
    NSDictionary *_completeUpdatesByKey;
    struct dispatch_semaphore_s *_foregroundConcurrentDownloadSemaphore;
    NSMutableSet *_backgroundKeys;
    NSMutableDictionary *_initiatedInstalls;
    NSMutableDictionary *_factoredInstallSizeByKey;
    NSMutableDictionary *_downloadDoneBlocksByKey;
    NSMutableDictionary *_completionSemaphoreByKey;
    long long _foregroundTransactions;
    long long _backgroundTransactions;
    NSMutableDictionary *_assertionByTransactionID;
    NSMutableDictionary *_transactionIDToProductKeys;
    struct dispatch_queue_s *_updateStatusQueue;
    struct dispatch_queue_s *_clientNotifyQueue;
    struct dispatch_queue_s *_transactionQueue;
    BOOL _isPreparingForReboot;
    BOOL _nowIsLater;
    BOOL _pendingStageInstallCancelled;
    id _transactionCountDidChangeHandler;
    id _installStateDidChangeHandler;
}

+ (id)sharedUpdateSession;
@property BOOL pendingStageInstallCancelled; // @synthesize pendingStageInstallCancelled=_pendingStageInstallCancelled;
@property BOOL nowIsLater; // @synthesize nowIsLater=_nowIsLater;
@property BOOL isPreparingForReboot; // @synthesize isPreparingForReboot=_isPreparingForReboot;
@property(copy) id installStateDidChangeHandler; // @synthesize installStateDidChangeHandler=_installStateDidChangeHandler;
@property(copy) id transactionCountDidChangeHandler; // @synthesize transactionCountDidChangeHandler=_transactionCountDidChangeHandler;
- (unsigned long long)diskSpaceRequiredForProducts:(id)arg1 includingInstall:(BOOL)arg2;
- (void)_stopTransactionWithID:(long long)arg1;
- (BOOL)_startTransactionForForeground:(BOOL)arg1 withProducts:(id)arg2 includingInstall:(BOOL)arg3 outTransactionID:(long long *)arg4;
- (long long)activeBackgroundTransactions;
- (long long)activeForegroundTransactions;
- (id)combinedStatusForUpdatesWithProductKeys:(id)arg1 individualStatus:(id *)arg2;
- (id)statusForUpdateWithProductKey:(id)arg1;
- (void)fixupStatusForLocalUpdateWithProductKey:(id)arg1;
- (id)_nonatomicStatusForUpdateWithProductKey:(id)arg1 averageDownloadSpeed:(float *)arg2;
- (id)_updateStatusForProducts:(id)arg1;
- (void)_cancelBackgroundDownloadOperations;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(id)arg2;
- (void)startUpdateForProducts:(id)arg1 usingClientAuthorization:(struct AuthorizationOpaqueRef *)arg2 inForeground:(BOOL)arg3 holdingBoostDuringInstall:(BOOL)arg4 stageInstall:(BOOL)arg5 clientBlocksRestart:(BOOL)arg6 allowOnlyAppleSigned:(BOOL)arg7 packageScriptUserID:(unsigned int)arg8 sendingStatusUpdates:(BOOL)arg9 replyWhenDone:(id)arg10;
- (void)_installProducts:(id)arg1 authorization:(struct AuthorizationOpaqueRef *)arg2 holdingBoostDuringInstall:(BOOL)arg3 stageInstall:(BOOL)arg4 clientBlocksRestart:(BOOL)arg5 allowOnlyAppleSigned:(BOOL)arg6 packageScriptUserID:(unsigned int)arg7;
- (void)startDownloadingForProducts:(id)arg1 inForeground:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)_startDownloadingUpdateWithProduct:(id)arg1 inForeground:(BOOL)arg2 forActivePhases:(long long)arg3 completionBlock:(id)arg4;
- (void)finishStagingProduct:(id)arg1 completionBlock:(id)arg2;
- (BOOL)_shouldResetStatus:(id)arg1 afterScan:(BOOL)arg2;
- (void)updateStatusChangedExternally:(id)arg1;
- (void)setupStatusForAvailableProducts:(id)arg1 afterScan:(BOOL)arg2;
- (void)_installStateDidChangeForKey:(id)arg1;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)dumpStateFromCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUUpdateServiceClient : NSObject <SUUpdateService, SUUpdateClient>
{
    NSXPCConnection *_connection;
    int _clientPID;
    int _clientAuditIdentifier;
    unsigned int _clientUID;
    NSString *_clientPath;
    struct AuthorizationOpaqueRef *_installAuth;
    NSMutableArray *_acquiredRights;
    unsigned long long _transactionsStarted;
    struct dispatch_queue_s *_transactionQueue;
    struct dispatch_queue_s *_lockQueue;
}

+ (void)ignoreClientMessagesForConnection:(id)arg1;
+ (void)authorizeForUpdating:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 additionalTransactions:(unsigned long long)arg3 reply:(id)arg4;
+ (void)authorizeForDaemonManagement:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 reply:(id)arg3;
+ (void)authorizeForUpdating:(struct AuthorizationOpaqueRef *)arg1 overConnection:(id)arg2 reply:(id)arg3;
@property(readonly, retain) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;
- (void)resetServiceWithReply:(id)arg1;
- (void)dumpServiceDebugInfo;
- (void)suspendBackgroundTasksTemporarily:(BOOL)arg1 desiredDuration:(long long)arg2 reply:(id)arg3;
- (void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(id)arg2;
- (void)statusForUpdateWithProductKey:(id)arg1 reply:(id)arg2;
- (void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(id)arg1;
- (void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(id)arg2;
- (void)productKeysToAutomaticallyInstallLaterWithReply:(id)arg1;
- (void)setAutomaticallyInstallLater:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(BOOL)arg5 replyWithResult:(id)arg6;
- (void)stringRepresentationOfLongDescriptionForProductKey:(id)arg1 reply:(id)arg2;
- (void)stashURLCredential:(id)arg1;
- (void)commitLoginCredentialsDisablingFLO:(BOOL)arg1 finishBlock:(id)arg2;
- (void)stashLoginCredentialsEnablingFLO:(BOOL)arg1 reply:(id)arg2;
- (void)productKeysToInstallAfterLogoutWithReply:(id)arg1;
- (void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(BOOL)arg2 restartNow:(BOOL)arg3 shouldStashCredentials:(BOOL)arg4 reply:(id)arg5;
- (void)cancelUpdatesForProductKeys:(id)arg1 reply:(id)arg2;
- (void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(BOOL)arg2 replyWhenDone:(id)arg3;
- (void)startInstallingAdminUpdates:(id)arg1 replyWhenDone:(id)arg2;
- (void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(id)arg2;
- (void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(BOOL)arg2 reply:(id)arg3;
- (void)buildTagCacheIfNecessaryWithReply:(id)arg1;
- (void)markRampedUpdatesAsSeenWithReply:(id)arg1;
- (void)clearAllHiddenUpdatesWithReply:(id)arg1;
- (void)setHidden:(BOOL)arg1 forProductKeys:(id)arg2 replyWhenDone:(id)arg3;
- (void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 distributionEvalutionMetainfo:(id)arg3 installedPrinters:(id)arg4 preferredLocalizations:(id)arg5 replyWhenDone:(id)arg6;
- (void)progressForRefreshOfAvailableUpdatesWithReply:(id)arg1;
- (void)refreshAvailableUpdates:(BOOL)arg1 preferredLocalizations:(id)arg2 replyWhenDone:(id)arg3;
- (void)catalogAndScanInformationWithReply:(id)arg1;
- (void)catalogInformationWithReply:(id)arg1;
- (void)endTransactions;
- (void)takePostInstallNotificationsWithReply:(id)arg1;
- (void)deviceInitiatedScanWithReply:(id)arg1;
- (void)installStatus:(id)arg1 didChangeExternallyForProductKey:(id)arg2;
- (void)currentDevKeyModeWithReply:(id)arg1;
- (void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3;
- (void)packageReferenceForMatchingIdentifier:(id)arg1 productKey:(id)arg2 invalidatingPrevious:(BOOL)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(unsigned long long)arg3 reply:(id)arg4;
- (void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 reply:(id)arg3;
- (void)authorizeForManagingDaemonWithExternalFormData:(id)arg1 reply:(id)arg2;
- (void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(id)arg3;
- (BOOL)_isAuthorizedToManageDaemon;
- (BOOL)_isAuthorizedForAppleSoftwareAsAdministrator;
- (BOOL)_isAuthorizedForAppleSoftware;
- (void)_noteAuthorizationUsed;
- (void)invalidate;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _SUUpdateServiceClientNullExportedObject : NSObject <SUUpdateClient>
{
}

- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUAppStoreAgentNotifier : NSObject
{
    NSXPCConnection *_connection;
    BOOL _postNotifyOnly;
    NSArray *_availableUpdates;
    NSArray *_installLaterKeys;
    NSArray *_postNotifyStrings;
    NSDictionary *_postLogoutInstallResults;
    NSDictionary *_autoInstalledJournalEntries;
    long long _postNotifyCount;
    BOOL _deviceInitiatedScan;
    id _logBlock;
}

@property(copy) id logBlock; // @synthesize logBlock=_logBlock;
- (void)notifyAppStoreAgentAndWaitUntilDone:(id)arg1;
- (id)availableUpdateParameters;
- (void)_getUpdateInformationFromDaemon;
- (void)dealloc;
- (id)initWithServiceConnection:(id)arg1 forPostInstallNotificationOnly:(BOOL)arg2;

@end

@interface SUDownloadProduct : NSObject <NSSecureCoding>
{
    NSArray *downloadURLs;
    BOOL _adminInitiated;
    NSString *_productKey;
    NSArray *_packageIdentifiers;
    NSString *_displayName;
    long long _downloadSize;
    long long _adminAction;
    long long _restartTimeInterval;
}

+ (BOOL)supportsSecureCoding;
@property BOOL adminInitiated; // @synthesize adminInitiated=_adminInitiated;
@property long long restartTimeInterval; // @synthesize restartTimeInterval=_restartTimeInterval;
@property long long adminAction; // @synthesize adminAction=_adminAction;
@property(readonly) long long downloadSize; // @synthesize downloadSize=_downloadSize;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSArray *packageIdentifiers; // @synthesize packageIdentifiers=_packageIdentifiers;
@property(readonly) NSString *productKey; // @synthesize productKey=_productKey;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithProduct:(id)arg1;

@end

@interface SUSharedAuthenticationHandler : NSObject <PKURLAuthenticationHandler>
{
    NSMutableDictionary *_certValidatedByHost;
    struct dispatch_queue_s *_updateQueue;
    BOOL _evCheckingDisabledByPref;
    NSMutableSet *_disabledHosts;
    NSURLCredential *_stashedURLCredential;
}

+ (id)sharedAuthenticationHandler;
@property(retain) NSURLCredential *stashedURLCredential; // @synthesize stashedURLCredential=_stashedURLCredential;
- (void)didReceiveAuthenticationChallenge:(id)arg1 completionHandler:(id)arg2;
- (void)promptForAuthenticationChallenge:(id)arg1;
- (void)_setCertValidated:(BOOL)arg1 forHost:(id)arg2;
- (BOOL)certValidatedForURL:(id)arg1;
- (BOOL)isHostDiabledForEVCheck:(id)arg1;
- (void)disableHostForEVCheck:(id)arg1;
- (id)init;

@end

@interface SUServicesProxy : NSObject
{
    NSLock *_serviceConnectionLock;
    NSMutableDictionary *_connectionsByServiceName;
    id _exportedObject;
}

+ (id)sharedServicesProxy;
@property(retain, nonatomic) id exportedObject; // @synthesize exportedObject=_exportedObject;
@property(readonly, nonatomic) id <SUDownloadService> downloadService;
- (id)connectionForService:(id)arg1;
- (id)connectionWithServiceName:(id)arg1;
- (id)objectProxyForServiceName:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface _SUManualAdoptedProduct : SUProduct
{
}

- (void)_ensureDistributionBaseURLIsSet;
- (unsigned long long)downloadSize;
- (id)packageReferenceForPackageIdentifier:(id)arg1;

@end

@interface SUManualProductAdopterImpl : NSObject
{
    NSString *_archivePath;
    PKDistribution *_distribution;
    SUProduct *_adoptedProduct;
}

- (id)adoptedProduct;
- (void)_mungePackageURLsUnderChoice:(id)arg1;
- (BOOL)_mungeDistributionWithDisplayName:(id)arg1 displayVersion:(id)arg2 error:(id *)arg3;
- (BOOL)adoptWithDisplayName:(id)arg1 displayVersion:(id)arg2 allowDevSigning:(BOOL)arg3 error:(id *)arg4;
- (id)_pathByCopyingProductArchiveFromFileHandle:(id)arg1 archiveName:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)initWithManualProductArchiveNamed:(id)arg1 readingFromFileHandle:(id)arg2 error:(id *)arg3;

@end

@interface SUSetupAssistantActions : NSObject
{
    NSXPCConnection *_connection;
}

+ (double)estimatedRunningTime;
- (void)runActionsWithProgressHandler:(id)arg1 completionHandler:(void)arg2;
- (void)_disconnectFromService;
- (BOOL)_connectToService;
- (void)dealloc;
- (id)init;

@end

@interface SUCatalogInstance : NSObject
{
    BOOL _predicateScanOnly;
    NSString *_catalogURL;
    NSString *_catalogName;
    long long _scanInterval;
    long long _stagingDelay;
}

@property(readonly) BOOL predicateScanOnly; // @synthesize predicateScanOnly=_predicateScanOnly;
@property(readonly) long long stagingDelay; // @synthesize stagingDelay=_stagingDelay;
@property(readonly) long long scanInterval; // @synthesize scanInterval=_scanInterval;
@property(readonly) NSString *catalogName; // @synthesize catalogName=_catalogName;
@property(readonly) NSString *catalogURL; // @synthesize catalogURL=_catalogURL;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;

@end

@interface SUURLSessionDownload : NSObject <NSURLSessionDelegate, NSURLSessionDownloadDelegate>
{
    NSURLSession *_session;
    NSOperationQueue *_operationQueue;
    struct dispatch_queue_s *_taskQueue;
    NSMutableArray *_dates;
    NSMutableArray *_lengthNumbers;
    NSMutableArray *_activeTaskIdentifiers;
    NSArray *_packageIdentifiersToInstall;
    long long _downloadSize;
    long long _numCLTimeouts;
    struct dispatch_queue_s *_progressQueue;
    struct dispatch_queue_s *_processPackagesQueue;
    BOOL _canRetry;
    BOOL _waitingOnTasksToCancel;
    void *_assetCacheServicesFn;
    long long _successfullyDownloadedBytes;
    id _finishedBlock;
    struct dispatch_semaphore_s *_cancelSemaphore;
    NSString *_sessionIdentifier;
    id <SUURLSessionDownloadDelegate> _delegate;
    BOOL _backgroundSession;
    BOOL _isCancelled;
    long long _totalBytesWritten;
    NSString *_productKey;
}

@property(readonly) NSString *productKey; // @synthesize productKey=_productKey;
@property BOOL isCancelled; // @synthesize isCancelled=_isCancelled;
@property(readonly) long long totalBytesWritten; // @synthesize totalBytesWritten=_totalBytesWritten;
@property(readonly) BOOL backgroundSession; // @synthesize backgroundSession=_backgroundSession;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(id)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)_processDownloadedFileAtPath:(id)arg1 withPackageInfo:(id)arg2 replyWhenDone:(id)arg3;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(id)arg3;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
@property(readonly, copy) NSString *description;
- (void)_updateProgressData:(long long)arg1;
- (float)averageBytesPerSecond;
- (void)cancelAndSaveResumeData:(BOOL)arg1;
- (void)cancel;
- (id)error;
- (void)startDownloadingPackagesWithIdentifiers:(id)arg1;
- (BOOL)_contentLocatorURLForOriginalURL:(id)arg1 outModifiedURL:(id *)arg2;
- (void)_retryDownloadForPackageIdentifier:(id)arg1 withPackageRef:(id)arg2 originalIdentifier:(unsigned long long)arg3 forNetworkRetry:(BOOL)arg4 resumable:(BOOL)arg5;
- (id)_backgroundConfiguration;
- (void)dealloc;
- (id)initWithIdentifier:(id)arg1 productKey:(id)arg2 downloadSize:(long long)arg3 forBackgroundTasks:(BOOL)arg4 delegate:(id)arg5 replyWhenFinished:(id)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUDeferredUpdateManager : NSObject
{
}

- (id)deferralBlacklist;
- (id)deferralWhitelist;
- (long long)managedDeferralTimespanInDays;
- (long long)autoDeferralTimespanInDays;
- (BOOL)deferralIsActive;
- (void)updateProductsWithCatalog:(id)arg1;
- (id)sharedDeferredUpdateManager;

@end

@interface SUCatalogDataManager : NSObject
{
    NSString *_catalogEntityTag;
    NSMutableDictionary *_lastClientRetrievalPostDateByKey;
    BOOL _isDefaultAppleProductionCatalogURL;
    BOOL _isAppleSeedCatalogURL;
    SUCatalog *_catalog;
    NSString *_cachePathRoot;
    struct dispatch_semaphore_s *_inFlightSemaphore;
    struct dispatch_queue_s *_updateQueue;
    struct dispatch_queue_s *_loadQueue;
    struct dispatch_queue_s *_handlerQueue;
}

+ (id)sharedCatalogDataManager;
- (void)dumpDebugInfo;
- (void)resetState;
- (void)dumpStateFromCoder:(id)arg1;
- (void)archiveToCoder:(id)arg1;
- (void)restoreFromCoder:(id)arg1;
- (void)_purgeChangedAndRemovedProductsFromCache;
- (void)_removeCacheForProduct:(id)arg1 reason:(id)arg2;
- (id)_cachePathForURL:(id)arg1 inProduct:(id)arg2;
- (id)_cachePathForProduct:(id)arg1;
- (void)invalidateResourcesForProduct:(id)arg1;
- (void)retrievePKMDataForProduct:(id)arg1 withHandler:(id)arg2;
- (void)undoRetrieveDistributionDataForProduct:(id)arg1;
- (void)retrieveDistributionDataForProduct:(id)arg1 preferredLocalizations:(id)arg2 withHandler:(id)arg3;
- (void)_retrieveURL:(id)arg1 forProduct:(id)arg2 withHandler:(id)arg3;
- (void)enumerateProductsWithHandler:(id)arg1;
- (BOOL)isCurrentCatalogAppleSeed;
- (BOOL)isCurrentCatalogDefaultAppleProduction;
- (void)retrieveCatalogWithHandler:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SUProductManagerIndexFile : NSObject
{
    struct dispatch_queue_s *_updateQueue;
}

- (void)_setProductKeysToAutomaticallyInstallLater:(id)arg1;
- (id)_productKeysToAutomaticallyInstallLater;
- (void)_setProductKeysToInstallAtLogout:(id)arg1;
- (id)_productKeysToInstallAtLogout;
- (void)_setPath:(id)arg1 forProductKey:(id)arg2;
- (id)_pathForProductKey:(id)arg1;
- (id)_allProductKeys;
- (void)dealloc;
- (BOOL)_flushUpdatesIndexToDisk:(id)arg1;
- (id)_updatesIndexDict;
- (id)initWithPath:(id)arg1;

@end

@interface SUProductManager : NSObject
{
    id _indexFile;
    NSMutableSet *_lockedProducts;
    struct dispatch_queue_s *_updatesRepoQueue;
}

+ (id)sharedUpdatesDirectory;
+ (id)suggestedPackagePathForFileName:(id)arg1 product:(id)arg2 createDirectoryIfNeeded:(BOOL)arg3;
+ (id)_suggestedProductPathForProductKey:(id)arg1 createDirectoryIfNeeded:(BOOL)arg2;
+ (id)defaultManager;
- (unsigned long long)downloadedSizeForProduct:(id)arg1;
- (id)packagePathForPackageURL:(id)arg1 productKey:(id)arg2;
- (id)productPathForProductKey:(id)arg1;
- (BOOL)isProductFullyDownloaded:(id)arg1;
- (id)localProductForProduct:(id)arg1;
- (id)allLocalProductKeys;
- (id)_anyLocalProductForProduct:(id)arg1;
- (BOOL)removeLocalProductWithKey:(id)arg1;
- (void)setLocked:(BOOL)arg1 forLocalProductWithKey:(id)arg2;
- (void)registerProductExternallyChanged:(id)arg1;
- (BOOL)createDirectoryForProduct:(id)arg1 error:(id *)arg2;
- (void)synchronize;
- (void)dealloc;
- (id)init;
- (id)productKeysToInstallAtLogout;
- (BOOL)addProductsToInstallAtLogout:(id)arg1 replacingPrevious:(BOOL)arg2 nowIsLater:(BOOL)arg3;
- (id)productKeysToAutomaticallyInstallLater;
- (void)setProductKeysToAutomaticallyInstallLater:(id)arg1;
- (void)removeProductKeysToAutomaticallyInstallLater:(id)arg1;
- (id)addProductsToAutomaticallyInstallLater:(id)arg1;

@end

@interface SUProductForSUS : NSObject
{
    SUProduct *_product;
}

- (id)descriptionDataReturningMIMEType:(id *)arg1;
- (unsigned long long)downloadSize;
- (long long)restartAction;
- (id)displayVersion;
- (id)displayName;
- (void)dealloc;
- (id)initWithProductKey:(id)arg1 catalogProductDictionary:(id)arg2 localization:(id)arg3 error:(id *)arg4;

@end

@interface NSURLResponse (PeerAddress)
- (id)peerAddress;
@end

@interface NSDictionary (CaseInsensitive)
- (id)objectForCaseInsensitiveKey:(id)arg1;
@end

@interface PKDistribution (SUAdditions)
+ (id)_softwareUpdateDistributionWithData:(id)arg1 error:(id *)arg2;
+ (id)_softwareUpdateDistributionWithContentsOfURL:(id)arg1 error:(id *)arg2;
- (id)auxinfo;
- (id)_softwareUpdateChoice;
- (id)_softwareUpdateInterfaceType;
- (void)_mungeInvisibleChoicesOutline;
@end

@interface PKDistributionController (SUAdditions)
- (void)_selectRootSoftwareUpdateChoice;
@end

@interface NSTask (Timeout)
- (int)_runWithTimeout:(double)arg1;
@end

@interface NSWorkspace (RestartAdditions)
- (BOOL)_shutdown;
- (BOOL)_restart;
- (BOOL)_logout;
- (BOOL)_sendAEToLoginWindow:(unsigned int)arg1 withFlags:(unsigned int)arg2;
@end

@interface NSAttributedString (SUAppExtras)
+ (id)_attributedStringWithData:(id)arg1 MIMEType:(id)arg2;
@end

@interface NSRunLoop (SUAdditions)
- (void)_runUntilCondition:(id)arg1 periodicAction:(void)arg2;
- (void)_runUntilCondition:(id)arg1;
@end

@interface PKPackageReference (SUCatalogAdditions)
- (BOOL)_isSamePackageAs:(id)arg1;
@end

